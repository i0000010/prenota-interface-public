import { goTo, acceptDialog, check, additionalApplicants, uploadFile, type, wait, click, setValue, selectByValue, setPageSession, clearCookies } from '../../utils/browser/middleware.js'
import { getRandomNumber } from '../../middleware.js'
import { requireLoggedIn, authorizedForService, validateAuthenticationForService } from './middleware.js'
import { updateSessionInCache } from '../../utils/cache/middleware.js'
import { catchAllErrors, validateSchema, validateAndSendResponseSchema } from '../../middleware.js'
import { serviceRouteController } from './middleware.js';

import { API_URL } from '../../config.js';
import { page } from '../../utils/browser/index.js';
import { AuthorizeServiceResponseSchema, Authorize541Schema, Authorize1123Schema, Authorize4597Schema, Authorize226Schema, Authorize1248Schema, Authorize655Schema, Authorize306Schema, Authorize861Schema, Authorize685Schema, Authorize81Schema, Authorize82Schema } from './serviceSchemas.js'

var serviceId: number

// ----------Boston Consulates---------- //
serviceId = 541 // Schengen visa
export const authorizeService541Controller = [
    serviceRouteController(serviceId),
    validateSchema(Authorize541Schema),
    clearCookies(page),
    setPageSession(page),
    // requireLoggedIn(page),
    goTo(page, `${API_URL}/Services/Booking/${serviceId}`),
    // wait(page, getRandomNumber(500, 1000)),
    validateAuthenticationForService(page, serviceId),
    acceptDialog(page),
    // selectByText(page, '#typeofbookingddl'),
    click(page, '#typeofbookingddl'),
    // wait(page, getRandomNumber(500, 1000)),
    selectByValue(page, '#typeofbookingddl', 'typeofbooking'),
    // wait(page, getRandomNumber(500, 1000)),
    additionalApplicants(page),
    // wait(page, getRandomNumber(500, 1000)),
    setValue(page,'#DatiAddizionaliPrenotante_0___testo', 'passportNumber'), // new
    // wait(page, getRandomNumber(500, 1000)),
    setValue(page, '#DatiAddizionaliPrenotante_1___testo', 'otherCitizenships'), // new
    // wait(page, getRandomNumber(500, 1000)),
    selectByValue(page, '#ddls_2', 'reasonForVisit'), // new
    // wait(page, getRandomNumber(500, 1000)),
    type(page, '#DatiAddizionaliPrenotante_3___data', 'passportExpirationDate'), // new
    // wait(page, getRandomNumber(500, 1000)),
    type(page, '#DatiAddizionaliPrenotante_4___testo', 'address'), // new
    // wait(page, getRandomNumber(500, 1000)),
    setValue(page, '#BookingNotes', 'notes'),
    // wait(page, getRandomNumber(500, 1000)),
    check(page, '#PrivacyCheck'),
    // wait(page, getRandomNumber(500, 1000)),
    click(page, '#btnAvanti'),
    // wait(page, getRandomNumber(500, 1000)),
    authorizedForService(page),
    updateSessionInCache(page),
    validateAndSendResponseSchema(AuthorizeServiceResponseSchema, {serviceId: serviceId, success: true}),
    catchAllErrors(),
]

serviceId = 1123 // Study visa
export const authorizeService1123Controller = [
    serviceRouteController(serviceId),
    validateSchema(Authorize1123Schema),
    clearCookies(page),
    setPageSession(page),
    // requireLoggedIn(page),
    goTo(page, `${API_URL}/Services/Booking/${serviceId}`),
    // wait(page, getRandomNumber(500, 1000)),
    validateAuthenticationForService(page, serviceId),
    acceptDialog(page),
    // selectByText(page, '#typeofbookingddl'),
    selectByValue(page, '#typeofbookingddl', 'typeofbooking'),
    // wait(page, getRandomNumber(500, 1000)),
    additionalApplicants(page),
    // wait(page, getRandomNumber(500, 1000)),
    setValue(page, '#BookingNotes', 'notes'),
    // wait(page, getRandomNumber(500, 1000)),
    check(page, '#PrivacyCheck'),
    // wait(page, getRandomNumber(500, 1000)),
    click(page, '#btnAvanti'),
    // wait(page, getRandomNumber(500, 1000)),
    authorizedForService(page),
    updateSessionInCache(page),
    validateAndSendResponseSchema(AuthorizeServiceResponseSchema, {serviceId: serviceId, success: true}),
    catchAllErrors(), 
]

// ----------Chicago Consulates---------- //
serviceId = 818 // All visas
export const authorizeService818Controller = [
    serviceRouteController(serviceId),
    validateSchema(Authorize306Schema),
    clearCookies(page),
    setPageSession(page),
    // requireLoggedIn(page),
    goTo(page, `${API_URL}/Services/Booking/${serviceId}`),
    wait(page, getRandomNumber(500, 1000)),
    validateAuthenticationForService(page, serviceId),
    acceptDialog(page),
    // selectByText(page, '#typeofbookingddl'),
    selectByValue(page, '#typeofbookingddl', 'typeofbooking'),
    // wait(page, getRandomNumber(500, 1000)),
    setValue(page, '#BookingNotes', 'notes'),
    // wait(page, getRandomNumber(500, 1000)),
    check(page, '#PrivacyCheck'),
    // wait(page, getRandomNumber(500, 1000)),
    click(page, '#btnAvanti'),
    // wait(page, getRandomNumber(500, 1000)),
    authorizedForService(page),
    updateSessionInCache(page),
    validateAndSendResponseSchema(AuthorizeServiceResponseSchema, {serviceId: serviceId, success: true}),
    catchAllErrors(),  
]

// ----------Detroit Consulates---------- //
serviceId = 4597 // Study visa
export const authorizeService4597Controller = [
    serviceRouteController(serviceId),
    validateSchema(Authorize4597Schema),
    clearCookies(page),
    setPageSession(page),
    // requireLoggedIn(page),
    goTo(page, `${API_URL}/Services/Booking/${serviceId}`),
    // wait(page, getRandomNumber(500, 1000)),
    validateAuthenticationForService(page, serviceId),
    acceptDialog(page),
    // selectByText(page, '#typeofbookingddl'),
    selectByValue(page, '#typeofbookingddl', 'typeofbooking'),
    // wait(page, getRandomNumber(500, 1000)),
    additionalApplicants(page),
    // wait(page, getRandomNumber(500, 1000)),
    setValue(page, '#BookingNotes', 'notes'),
    // wait(page, getRandomNumber(500, 1000)),
    check(page, '#PrivacyCheck'),
    // wait(page, getRandomNumber(500, 1000)),
    click(page, '#btnAvanti'),
    // wait(page, getRandomNumber(500, 1000)),
    authorizedForService(page),
    updateSessionInCache(page),
    validateAndSendResponseSchema(AuthorizeServiceResponseSchema, {serviceId: serviceId, success: true}),
    catchAllErrors(),  
]

// ----------Philadelphia Consulates---------- //
serviceId = 226 // Schengen visa
export const authorizeService226Controller = [
    serviceRouteController(serviceId),
    validateSchema(Authorize226Schema),
    clearCookies(page),
    setPageSession(page),
    // requireLoggedIn(page),
    goTo(page, `${API_URL}/Services/Booking/${serviceId}`),
    // wait(page, getRandomNumber(500, 1000)),
    validateAuthenticationForService(page, serviceId),
    acceptDialog(page),
    click(page, '#typeofbookingddl'),
    // wait(page, getRandomNumber(500, 1000)),
    selectByValue(page, '#typeofbookingddl', 'typeofbooking'),
    // wait(page, getRandomNumber(500, 1000)),
    additionalApplicants(page),
    // wait(page, getRandomNumber(500,1000)),
    selectByValue(page, '#ddls_0', 'reasonForVisit'),
    // wait(page, getRandomNumber(500, 1000)),
    setValue(page, '#BookingNotes', 'notes'),
    // wait(page, getRandomNumber(500, 1000)),
    check(page, '#PrivacyCheck'),
    // wait(page, getRandomNumber(500, 1000)),
    click(page, '#btnAvanti'),
    // wait(page, getRandomNumber(500, 1000)),
    authorizedForService(page),
    updateSessionInCache(page),
    validateAndSendResponseSchema(AuthorizeServiceResponseSchema, {serviceId: serviceId, success: true}),
    catchAllErrors(),
]

// ----------Houston Consulates---------- //
serviceId = 1248 // Business visa
export const authorizeService1248Controller = [
    serviceRouteController(serviceId),
    validateSchema(Authorize1248Schema),
    clearCookies(page),
    setPageSession(page),
    // requireLoggedIn(page),
    goTo(page, `${API_URL}/Services/Booking/${serviceId}`),
    // wait(page, getRandomNumber(500, 1000)),
    validateAuthenticationForService(page, serviceId),
    acceptDialog(page),
    click(page, '#typeofbookingddl'),
    // wait(page, getRandomNumber(500, 1000)),
    // selectByText(page, '#typeofbookingddl'),
    selectByValue(page, '#typeofbookingddl', 'typeofbooking'),
    // wait(page, getRandomNumber(500, 1000)),
    setValue(page, "#DatiAddizionaliPrenotante_0___testo", "citizenship"),
    // wait(page, getRandomNumber(500, 1000)),
    type(page, '#DatiAddizionaliPrenotante_1___data', 'passportExpirationDate'),
    // wait(page, getRandomNumber(500, 1000)),
    setValue(page, '#DatiAddizionaliPrenotante_2___testo', 'passportCountry'),
    // wait(page, getRandomNumber(500, 1000)),
    setValue(page, '#DatiAddizionaliPrenotante_3___testo', 'address'),
    // wait(page, getRandomNumber(500, 1000)),
    selectByValue(page, '#ddls_4', 'reasonForVisit'),
    // wait(page, getRandomNumber(500, 1000)),
    uploadFile(page, '#File_0', 'passportPath'),
    // wait(page, getRandomNumber(500, 1000)),  
    setValue(page, '#otp-input', 'otp'),
    // wait(page, getRandomNumber(500, 1000)),
    setValue(page, '#BookingNotes', 'notes'),
    // wait(page, getRandomNumber(500, 1000)),
    check(page, '#PrivacyCheck'),
    // wait(page, getRandomNumber(500, 1000)),
    click(page, '#btnAvanti'),
    // wait(page, getRandomNumber(500, 1000)),
    authorizedForService(page),
    updateSessionInCache(page),
    validateAndSendResponseSchema(AuthorizeServiceResponseSchema, {serviceId: serviceId, success: true}),
    catchAllErrors(),
]

// serviceId = 1250 // Tourist visa

// ----------Los Angeles Consulates---------- //
serviceId = 655 // National visa
export const authorizeService655Controller = [
    serviceRouteController(serviceId),
    validateSchema(Authorize655Schema),
    clearCookies(page),
    setPageSession(page),
    // requireLoggedIn(page),
    goTo(page, `${API_URL}/Services/Booking/${serviceId}`),
    // wait(page, getRandomNumber(500, 1000)),
    validateAuthenticationForService(page, serviceId),
    acceptDialog(page),
    click(page, '#typeofbookingddl'),
    // wait(page, getRandomNumber(500, 1000)),
    selectByValue(page, '#typeofbookingddl', 'typeofbooking'),
    // wait(page, getRandomNumber(500, 1000)),
    setValue(page, "#DatiAddizionaliPrenotante_0___testo", "passportNumber"),
    // wait(page, getRandomNumber(500, 1000)),
    selectByValue(page, '#ddls_1', 'passportType'),
    // wait(page, getRandomNumber(500, 1000)),
    setValue(page, '#DatiAddizionaliPrenotante_2___testo', 'passportCountry'),
    // wait(page, getRandomNumber(500, 1000)),
    setValue(page, '#DatiAddizionaliPrenotante_3___testo', 'address'),
    // wait(page, getRandomNumber(500, 1000)),
    selectByValue(page, '#ddls_4', 'reasonForVisit'),
    // wait(page, getRandomNumber(500, 1000)),
    type(page, '#DatiAddizionaliPrenotante_5___data', 'passportExpirationDate'),
    // wait(page, getRandomNumber(500, 1000)),
    setValue(page, '#otp-input', 'otp'),
    // wait(page, getRandomNumber(500, 1000)),
    setValue(page, '#BookingNotes', 'notes'),
    // wait(page, getRandomNumber(500, 1000)),
    check(page, '#PrivacyCheck'),
    // wait(page, getRandomNumber(500, 1000)),
    click(page, '#btnAvanti'),
    // wait(page, getRandomNumber(500, 1000)),
    authorizedForService(page),
    updateSessionInCache(page),
    validateAndSendResponseSchema(AuthorizeServiceResponseSchema, {serviceId: serviceId, success: true}),
    catchAllErrors(),
]

serviceId = 694 // Schengen visa
export const authorizeService694Controller = [
    serviceRouteController(serviceId),
    validateSchema(Authorize655Schema),
    clearCookies(page),
    setPageSession(page),
    // requireLoggedIn(page),
    goTo(page, `${API_URL}/Services/Booking/${serviceId}`),
    // wait(page, getRandomNumber(500, 1000)),
    validateAuthenticationForService(page, serviceId),
    acceptDialog(page),
    click(page, '#typeofbookingddl'),
    // wait(page, getRandomNumber(500, 1000)),
    selectByValue(page, '#typeofbookingddl', 'typeofbooking'),
    // wait(page, getRandomNumber(500, 1000)),
    setValue(page, "#DatiAddizionaliPrenotante_0___testo", "passportNumber"),
    // wait(page, getRandomNumber(500, 1000)),
    selectByValue(page, '#ddls_1', 'passportType'),
    // wait(page, getRandomNumber(500, 1000)),
    setValue(page, '#DatiAddizionaliPrenotante_2___testo', 'passportCountry'),
    // wait(page, getRandomNumber(500, 1000)),
    type(page, '#DatiAddizionaliPrenotante_3___data', 'passportExpirationDate'),
    // wait(page, getRandomNumber(500, 1000)),
    setValue(page, '#DatiAddizionaliPrenotante_4___testo', 'address'),
    // wait(page, getRandomNumber(500, 1000)),
    selectByValue(page, '#ddls_5', 'reasonForVisit'),
    // wait(page, getRandomNumber(500, 1000)),
    setValue(page, '#otp-input', 'otp'),
    // wait(page, getRandomNumber(500, 1000)),
    setValue(page, '#BookingNotes', 'notes'),
    // wait(page, getRandomNumber(500, 1000)),
    check(page, '#PrivacyCheck'),
    // wait(page, getRandomNumber(500, 1000)),
    click(page, '#btnAvanti'),
    // wait(page, getRandomNumber(500, 1000)),
    authorizedForService(page),
    updateSessionInCache(page),
    validateAndSendResponseSchema(AuthorizeServiceResponseSchema, {serviceId: serviceId, success: true}),
    catchAllErrors(),
]

// ----------New York Consulates---------- //
serviceId = 306 // Study visa
export const authorizeService306Controller = [
    serviceRouteController(serviceId),
    validateSchema(Authorize306Schema),
    clearCookies(page),
    setPageSession(page),
    // requireLoggedIn(page),
    goTo(page, `${API_URL}/Services/Booking/${serviceId}`),
    // wait(page, getRandomNumber(500, 1000)),
    validateAuthenticationForService(page, serviceId),
    acceptDialog(page),
    // selectByText(page, '#typeofbookingddl'),
    selectByValue(page, '#typeofbookingddl', 'typeofbooking'),
    // wait(page, getRandomNumber(500, 1000)),
    setValue(page, '#BookingNotes', 'notes'),
    // wait(page, getRandomNumber(500, 1000)),
    check(page, '#PrivacyCheck'),
    // wait(page, getRandomNumber(500, 1000)),
    click(page, '#btnAvanti'),
    // wait(page, getRandomNumber(500, 1000)),
    authorizedForService(page),
    updateSessionInCache(page),
    validateAndSendResponseSchema(AuthorizeServiceResponseSchema, {serviceId: serviceId, success: true}),
    catchAllErrors(),
]

serviceId = 392 // National visa
export const authorizeService392Controller = [
    serviceRouteController(serviceId),
    validateSchema(Authorize306Schema),
    clearCookies(page),
    setPageSession(page),
    // requireLoggedIn(page),
    goTo(page, `${API_URL}/Services/Booking/${serviceId}`),
    // wait(page, getRandomNumber(500, 1000)),
    validateAuthenticationForService(page, serviceId),
    acceptDialog(page),
    // selectByText(page, '#typeofbookingddl'),
    selectByValue(page, '#typeofbookingddl', 'typeofbooking'),
    // wait(page, getRandomNumber(500, 1000)),
    setValue(page, '#BookingNotes', 'notes'),
    // wait(page, getRandomNumber(500, 1000)),
    check(page, '#PrivacyCheck'),
    // wait(page, getRandomNumber(500, 1000)),
    click(page, '#btnAvanti'),
    // wait(page, getRandomNumber(500, 1000)),
    authorizedForService(page),
    updateSessionInCache(page),
    validateAndSendResponseSchema(AuthorizeServiceResponseSchema, {serviceId: serviceId, success: true}),
    catchAllErrors(),
]

serviceId = 393 // Schengen visa
export const authorizeService393Controller = [
    serviceRouteController(serviceId),
    validateSchema(Authorize306Schema),
    clearCookies(page),
    setPageSession(page),
    // requireLoggedIn(page),
    goTo(page, `${API_URL}/Services/Booking/${serviceId}`),
    // wait(page, getRandomNumber(500, 1000)),
    validateAuthenticationForService(page, serviceId),
    acceptDialog(page),
    // selectByText(page, '#typeofbookingddl'),
    selectByValue(page, '#typeofbookingddl', 'typeofbooking'),
    // wait(page, getRandomNumber(500, 1000)),
    setValue(page, '#BookingNotes', 'notes'),
    // wait(page, getRandomNumber(500, 1000)),
    check(page, '#PrivacyCheck'),
    // wait(page, getRandomNumber(500, 1000)),
    click(page, '#btnAvanti'),
    // wait(page, getRandomNumber(500, 1000)),
    authorizedForService(page),
    updateSessionInCache(page),
    validateAndSendResponseSchema(AuthorizeServiceResponseSchema, {serviceId: serviceId, success: true}),
    catchAllErrors(),
]


// ----------Miami Consulates---------- //
serviceId = 861 // i forget which
export const authorizeService861Controller = [
    serviceRouteController(serviceId),
    validateSchema(Authorize861Schema),
    clearCookies(page),
    setPageSession(page),
    // requireLoggedIn(page),
    goTo(page, `${API_URL}/Services/Booking/${serviceId}`),
    // wait(page, getRandomNumber(500, 1000)),
    validateAuthenticationForService(page, serviceId),
    acceptDialog(page),
    selectByValue(page, '#typeofbookingddl', 'typeofbooking'),
    // wait(page, getRandomNumber(500, 1000)),
    selectByValue(page, '#ddls_0', 'reasonForVisit'),
    // wait(page, getRandomNumber(500, 1000)),
    type(page, '#DatiAddizionaliPrenotante_1___data', 'passportExpirationDate'),
    // wait(page, getRandomNumber(500, 1000)),
    type(page, '#DatiAddizionaliPrenotante_2___testo', 'address'),
    // wait(page, getRandomNumber(500, 1000)),
    setValue(page, '#otp-input', 'otp'),
    // wait(page, getRandomNumber(500, 1000)),
    click(page, '#PrivacyCheck'),
    // wait(page, getRandomNumber(500, 1000)),
    click(page, '#btnAvanti'),
    // wait(page, getRandomNumber(500, 1000)),
    authorizedForService(page),
    updateSessionInCache(page),
    validateAndSendResponseSchema(AuthorizeServiceResponseSchema, {serviceId: serviceId, success: true}),
    catchAllErrors(),
]

serviceId = 863 // i forget which
export const authorizeService863Controller = [
    serviceRouteController(serviceId),
    validateSchema(Authorize861Schema),
    clearCookies(page),
    setPageSession(page),
    // requireLoggedIn(page),
    goTo(page, `${API_URL}/Services/Booking/${serviceId}`),
    // wait(page, getRandomNumber(500, 1000)),
    validateAuthenticationForService(page, serviceId),
    acceptDialog(page),
    selectByValue(page, '#typeofbookingddl', 'typeofbooking'),
    // wait(page, getRandomNumber(500, 1000)),
    selectByValue(page, '#ddls_0', 'reasonForVisit'),
    // wait(page, getRandomNumber(500, 1000)),
    type(page, '#DatiAddizionaliPrenotante_1___data', 'passportExpirationDate'),
    // wait(page, getRandomNumber(500, 1000)),
    type(page, '#DatiAddizionaliPrenotante_2___testo', 'address'),
    // wait(page, getRandomNumber(500, 1000)),
    setValue(page, '#otp-input', 'otp'),
    // wait(page, getRandomNumber(500, 1000)),
    click(page, '#PrivacyCheck'),
    // wait(page, getRandomNumber(500, 1000)),
    click(page, '#btnAvanti'),
    // wait(page, getRandomNumber(500, 1000)),
    authorizedForService(page),
    updateSessionInCache(page),
    validateAndSendResponseSchema(AuthorizeServiceResponseSchema, {serviceId: serviceId, success: true}),
    catchAllErrors(),
]

// ----------San Francisco Consulates---------- //
serviceId = 685 // Schengen visa
export const authorizeService685Controller = [
    serviceRouteController(serviceId),
    validateSchema(Authorize685Schema),
    clearCookies(page),
    setPageSession(page),
    // requireLoggedIn(page),
    goTo(page, `${API_URL}/Services/Booking/${serviceId}`),
    // wait(page, getRandomNumber(500, 1000)),
    validateAuthenticationForService(page, serviceId),
    acceptDialog(page),
    // selectByValue(page, '#typeofbookingddl', 'typeofbooking'),
    // wait(page, getRandomNumber(500, 1000)),
    click(page, '#ddls_0'),
    // wait(page, getRandomNumber(500, 1000)),
    selectByValue(page, '#ddls_0', 'passportType'),
    // wait(page, getRandomNumber(500, 1000)),
    selectByValue(page, '#ddls_1', 'reasonForVisit'),
    // wait(page, getRandomNumber(500, 1000)),
    setValue(page, '#DatiAddizionaliPrenotante_2___testo', 'address'),
    // wait(page, getRandomNumber(500, 1000)),
    uploadFile(page, '#File_0', 'proofOfResidencePath'),
    // wait(page, getRandomNumber(500, 1000)),
    setValue(page, '#BookingNotes', 'notes'),
    // wait(page, getRandomNumber(500, 1000)),
    click(page, '#PrivacyCheck'),
    // wait(page, getRandomNumber(500, 1000)),
    // wait(page,1000000000),
    click(page, '#btnAvanti'),
    // wait(page, getRandomNumber(500, 1000)),
    authorizedForService(page),
    updateSessionInCache(page),
    validateAndSendResponseSchema(AuthorizeServiceResponseSchema, {serviceId: serviceId, success: true}),
    catchAllErrors(),
]

// ----------Washington DC Consulates---------- //
serviceId = 81 // National visa
export const authorizeService81Controller = [
    serviceRouteController(serviceId),
    validateSchema(Authorize81Schema),
    clearCookies(page),
    setPageSession(page),
    // requireLoggedIn(page),
    goTo(page, `${API_URL}/Services/Booking/${serviceId}`),
    // wait(page, getRandomNumber(500, 1000)),
    validateAuthenticationForService(page, serviceId),
    acceptDialog(page),
    click(page, '#typeofbookingddl'),
    // wait(page, getRandomNumber(500, 1000)),
    selectByValue(page, '#typeofbookingddl', 'typeofbooking'),
    // wait(page, getRandomNumber(500, 1000)),
    selectByValue(page, '#ddls_0', 'passportType'),
    // wait(page, getRandomNumber(500, 1000)),
    setValue(page, "#DatiAddizionaliPrenotante_1___testo", "passportNumber"),
    // wait(page, getRandomNumber(500, 1000)),
    click(page, '#DatiAddizionaliPrenotante_2___data'),
    // wait(page, getRandomNumber(500, 1000)),
    type(page, '#DatiAddizionaliPrenotante_2___data', 'passportExpirationDate'),
    // wait(page, getRandomNumber(500, 1000)),
    type(page, '#DatiAddizionaliPrenotante_3___testo', 'address'),
    // wait(page, getRandomNumber(500, 1000)),
    selectByValue(page, '#ddls_4', 'reasonForVisit'),
    // wait(page, getRandomNumber(500, 1000)),
    setValue(page, '#DatiAddizionaliPrenotante_5___testo', 'otherCitizenships'),
    // wait(page, getRandomNumber(500, 1000)),
    setValue(page, '#BookingNotes', 'notes'),
    // wait(page, getRandomNumber(500, 1000)),
    check(page, '#PrivacyCheck'),
    // wait(page, getRandomNumber(500, 1000)),
    click(page, '#btnAvanti'),
    // wait(page, getRandomNumber(500, 1000)),
    authorizedForService(page),
    updateSessionInCache(page),
    validateAndSendResponseSchema(AuthorizeServiceResponseSchema, {serviceId: serviceId, success: true}),
    catchAllErrors(),
]

serviceId = 82 // Schengen visa
export const authorizeService82Controller = [
    serviceRouteController(serviceId),
    validateSchema(Authorize82Schema),
    clearCookies(page),
    setPageSession(page),
    // requireLoggedIn(page),
    goTo(page, `${API_URL}/Services/Booking/${serviceId}`),
    // wait(page, getRandomNumber(500, 1000)),
    validateAuthenticationForService(page, serviceId),
    acceptDialog(page),
    click(page, '#typeofbookingddl'),
    // wait(page, getRandomNumber(500, 1000)),
    click(page, '#typeofbookingddl'),
    // wait(page, getRandomNumber(250,500)),
    selectByValue(page, '#typeofbookingddl', 'typeofbooking'),
    // wait(page, getRandomNumber(500, 1000)),
    additionalApplicants(page),
    // wait(page, getRandomNumber(500, 1000)),
    selectByValue(page, '#ddls_0', 'passportType'),
    // wait(page, getRandomNumber(500, 1000)),
    setValue(page, "#DatiAddizionaliPrenotante_1___testo", "passportNumber"),
    // wait(page, getRandomNumber(500, 1000)),
    click(page, '#ddls_2'),
    // wait(page, getRandomNumber(500, 1000)),
    selectByValue(page, '#ddls_2', 'reasonForVisit'),
    // wait(page, getRandomNumber(500, 1000)),
    type(page, '#DatiAddizionaliPrenotante_3___testo', 'address'),
    // wait(page, getRandomNumber(500, 1000)),
    click(page, '#DatiAddizionaliPrenotante_4___data'),
    // wait(page, getRandomNumber(500, 1000)),
    type(page, '#DatiAddizionaliPrenotante_4___data', 'passportExpirationDate'),
    // wait(page, getRandomNumber(500, 1000)),
    setValue(page, '#DatiAddizionaliPrenotante_5___testo', 'otherCitizenships'),
    // wait(page, getRandomNumber(500, 1000)),
    setValue(page, '#DatiAddizionaliPrenotante_6___testo', 'passportCountry'),
    // wait(page, getRandomNumber(500, 1000)),
    setValue(page, '#BookingNotes', 'notes'),
    // wait(page, getRandomNumber(500, 1000)),
    check(page, '#PrivacyCheck'),
    // wait(page, getRandomNumber(500, 1000)),
    click(page, '#btnAvanti'),
    // wait(page, getRandomNumber(500, 1000)),
    authorizedForService(page),
    updateSessionInCache(page),
    validateAndSendResponseSchema(AuthorizeServiceResponseSchema, {serviceId: serviceId, success: true}),
    catchAllErrors(),
] 